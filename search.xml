<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[架构关注点]]></title>
      <url>/2018/02/07/%E6%9E%B6%E6%9E%84%E5%85%B3%E6%B3%A8%E7%82%B9/</url>
      <content type="html"><![CDATA[<p>在途牛全能力培训的中，现任途牛架构师的梅存兵，给我们分享了架构关注的是什么</p>
<p><img src="/images/架构关注点-1.jpg" alt="架构关注点-1"><br><img src="/images/架构关注点-2.jpg" alt="架构关注点-2"><br><img src="/images/架构关注点-3.jpg" alt="架构关注点-2"></p>
]]></content>
      
        <categories>
            
            <category> 架构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 架构关注点 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[并发的有趣概念]]></title>
      <url>/2018/01/25/%E5%B9%B6%E5%8F%91%E7%9A%84%E6%9C%89%E8%B6%A3%E6%A6%82%E5%BF%B5/</url>
      <content type="html"><![CDATA[<h6 id="1-从性能的角度看，如果没有任务会阻塞，那么在单处理器上使用并发就没有任何意义"><a href="#1-从性能的角度看，如果没有任务会阻塞，那么在单处理器上使用并发就没有任何意义" class="headerlink" title="1. 从性能的角度看，如果没有任务会阻塞，那么在单处理器上使用并发就没有任何意义"></a>1. 从性能的角度看，如果没有任务会阻塞，那么在单处理器上使用并发就没有任何意义</h6><p>从直觉上来说，在单处理器上运行并发程序的开销确实比该程序的所有部分都顺序执行的开销大，因为其中增加了所谓<code>上下文切换</code>的代价（从一个任务切换到另一个任务）。<br>使这个问题变得有些不同的是<code>阻塞</code>,如果程序中的某个任务应为该程序控制范围之外的某些条件（通常是I/O）而导致不能继续执行,那么我们就说这个任务或线程阻塞了。如果没有并发，整个程序都会停下来，指导外部条件发生了变化。但是使用并发就可以在一个任务阻塞后切换执行另一个任务，从整体上提高了程序的执行效率（类似于并行的流水线）。</p>
<h6 id="2-并发的底层实现选择"><a href="#2-并发的底层实现选择" class="headerlink" title="2. 并发的底层实现选择"></a>2. 并发的底层实现选择</h6><p>实现并发的最直接的方式是在操作系统级别使用进程。<br>这是并发的理想状态，每个任务都作为进程在其自己的地址空间中执行，因此任务之间根本不可能相互干涉。更重要的是，对于进程来说，它们之间没有任何彼此通信的需要，因为它们都是完全独立的。<br>但是遗憾的是，对进程通常会有数量和开销的限制，以避免它们在不同的并发系统之间的可应用性。<br>某些编程语言被设计为可以将并发任务彼此隔离，这些语言通常被称为<code>函数型语言</code>，其中每个函数的调用都不会产生任何副作用（并因此不能干涉其他函数），类似Erlang。<br>java采用了更加传统的方式，在顺序性语言的基础上提供对线程的支持。与在多任务操作系统中分叉外部进程不同，线程机制是在实行程序表示的单一进程中创建任务。这种方式产生的一个好处就是操作系统的透明性，这对java而言是一个非常重要的设计目标。</p>
<h6 id="3-java基本的线程机制"><a href="#3-java基本的线程机制" class="headerlink" title="3. java基本的线程机制"></a>3. java基本的线程机制</h6><p>并发编程使我们可以将程序划分为多个分离的独立运行的任务。通过多线程机制，这些独立任务中的每一个都由<code>执行线程</code>来驱动。一个线程就是进程中的一个单一的顺序控制流，因此，单个进程可以拥有多个并发执行的任务，但是你的程序使得每个任务都好像有其自己的cpu一样。其底层机制是切分cpu时间，单通常你不需要考虑它。<br>线程模型为编程带来了便利，它简化了在单一程序中同时交织在一起的多个操作的处理。在使用线程时，cpu将轮流给每个任务分配其占用时间（当系统使用时间切片机制时是如此，例如windows，但类似Solaris的FIFO并发模型里，只有高优先级能抢占处理器）。每个任务都觉得自己一直在占用cpu，但事实上cpu时间是划分成片段分配给了所有任务（例外情况是程序确实运行在多个cpu上）</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[java实现线程的三种方式]]></title>
      <url>/2018/01/25/java%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>并发不一定要依赖多线程（如PHP中很常见的多进程并发）。</p>
<p>线程的实现</p>
<p>各个线程既可以共享进程资源（内存地址、文件I/O等），又可以独立调度（线程是CPU调度的基本单位）。</p>
<p>每个已经执行start()且还未结束的java.lang.Thread类的实例就代表了一个线程。Thread的所有关键方法都是声明为Native的。在Java API中，一个Native方法往往意味着这个方法没有使用或无法使用平台无关的手段来实现（当然也可能是为了执行效率而使用Native方法，不过，通常最高效的手段也就是平台相关的手段）。</p>
<p>实现线程主要有3种方式：</p>
<p>1）使用内核线程实现</p>
<p>2）使用用户线程实现</p>
<p>3）使用用户线程加轻量级进程混合实现</p>
<p>使用内核线程（Kernel-Level Thread，KLT）实现</p>
<p>内核线程就是直接由操作系统内核（Kernel）支持的线程，这种线程由内核来完成线程切换，内核通过操纵调度器（Scheduler）对线程进行调度，并负责将线程的任务映射到各个处理器上。每个内核线程可以视为内核的一个分身，这样操作系统就有能力同时处理多件事情，支持多线程的内核就叫做多线程内核（Multi-Threads Kernel）。</p>
<p>程序一般不会直接去使用内核线程，而是去使用内核线程的一种高级接口–轻量级进程（Light Weight Process，LWP），轻量级进程就是我们通常意义上所讲的线程，由于每个轻量级进程都由一个内核线程支持，因此只有先支持内核线程，才能有轻量级进程。这种轻量级进程与内核线程之间1:1的关系称为一对一的线程模型。</p>
<p>轻量级进程与内核线程之间1:1的关系：</p>
<p><img src="/images/pasted-11.png" alt="upload successful"><br>由于内核线程的支持，每个轻量级进程都成为一个独立的调度单元，即使有一个轻量级进程在系统调用中阻塞了，也不会影响整个进程继续工作，但是轻量级进程具有它的局限性：首先，由于是基于内核线程实现的，所以各种线程操作，如创建、析构及同步，都需要进行系统调用。而系统调用的代价相对较高，需要在用户态（User Mode）和内核态（Kernel Mode）中来回切换。其次，每个轻量级进程都需要有一个内核线程的支持，因此轻量级进程要消耗一定的内核资源（如内核线程的栈空间），因此一个系统支持轻量级进程的数量是有限的。</p>
<p>使用用户线程实现</p>
<p>从广义上来讲，一个线程只要不是内核线程，就可以认为是用户线程（User Thread，UT），轻量级进程也属于用户线程，但轻量级进程的实现始终是建立在内核之上的，许多操作都要进行系统调用，效率会受到限制。</p>
<p>而狭义上的用户线程指的是完全建立在用户空间的线程库上，系统内核不能感知线程存在的实现。用户线程的建立、同步、销毁和调度完全在用户态中完成，不需要内核的帮助。如果程序实现得当，这种线程不需要切换到内核态，因此操作可以是非常快速且低消耗的，也可以支持规模更大的线程数量，部分高性能数据库中的多线程就是由用户线程实现的。这种进程与用户线程之间1:N的关系称为一对多的线程模型：</p>
<p><img src="/images/pasted-12.png" alt="upload successful"><br>使用用户线程的优势在于不需要系统内核支援，劣势也在于没有系统内核的支援，所有的线程操作都需要用户程序自己处理。线程的创建、切换和调度都是需要考虑的问题，而且由于操作系统只把处理器资源分配到进程，那诸如“阻塞如何处理”，“多处理器系统中如何将线程映射到其它处理器上”这类问题解决起来将会异常困难，甚至不可能完成。除了以前在不支持多线程的操作系统中（如DOS）的多线程程序与少数有特殊需求的程序外，现在使用用户线程的程序越来越少了，Java、Ruby等语言都曾经使用过用户线程，最终又都放弃使用它。</p>
<p>使用用户线程加轻量级进程混合实现</p>
<p>在这种混合实现下，即存在用户线程，也存在轻量级进程。用户线程还是完全建立在用户空间中，因此用户线程的创建、切换、析构等操作依然廉价，并且可以支持大规模的用户线程并发。而操作系统提供支持的轻量级进程则作为用户线程和内核线程之间的桥梁，这样可以使用内核提供的线程调度功能及处理器映射，并且用户线程的系统调用要通过轻量级进程来完成，大大降低了整个进程被完全阻塞的风险。在这种混合模式中，用户线程与轻量级进程的数量比是不定的，即为N:M的关系：</p>
<p><img src="/images/pasted-13.png" alt="upload successful"><br>许多UNIX系列的操作系统，如Salaris、HP-UX等都提供了N:M的线程模型实现。</p>
<p>Java线程的实现</p>
<p>Java线程在JDK1.2之前，是基于称为“绿色线程”（Green Threads）的用户线程实现的，而在JDK1.2中，线程模型替换为基于操作系统原生线程模型来实现。因此，在目前的JDK版本中，操作系统支持怎样的线程模型，在很大程度上决定了Java虚拟机的线程是怎样映射的，这点在不同的平台上没有办法达成一致，虚拟机规范中也并未限定Java线程需要使用哪种线程模型来实现。线程模型只对线程的并发规模和操作成本产生影响，对Java程序的编码和运行过程来说，这些差异都是透明的。</p>
<p>对于Sun JDK来说，它的Windows版与Linux版都是使用一对一的线程模型实现的，一条Java线程就映射到一条轻量级进程之中，因为Windows和Linux系统提供的线程模型就是一对一的。</p>
<p>而在Solari平台中，由于操作系统的线程特性可以同时支持一对一（通过Bound Threads或Alternate Libthread实现）及一对多（通过LWP/Thread Based Synchronization实现）的线程模型，因此在Solaris版的JDK中也对应提供了两个平台专有的虚拟机参数：-XX:+UseLWPSynchronization（默认值）和-XX:+UseBoundThreads来明确指定虚拟机使用哪种线程模型。</p>
<p>Java线程调度</p>
<p>线程调度是指系统为线程分配处理器使用权的过程，主要调度方式有两种：</p>
<p>1）协同式线程调度（Cooperative Threads-Scheduling）</p>
<p>2）抢占式线程调度（Preemptive Threads-Scheduling）</p>
<p>如果使用协同式调度的多线程系统，线程的执行时间由线程本身来控制，线程把自己的工作执行完了之后，要主动通知系统切换到另外一个线程上。协调式线程调度：</p>
<p>好处：</p>
<p>1）实现简单</p>
<p>2）没有线程同步问题。由于线程要把自己的事情干完后才会进程线程切换，切换操作对线程自己是可知的，所以没有什么线程同步问题。Lua语言中的“协调例程”就是这类实现。</p>
<p>坏处：</p>
<p>1）线程执行时间不可控制</p>
<p>2）甚至如果一个线程编写有问题，一直不告知系统进行线程切换，那么程序就会一直阻塞在那里。很久以前的Windows 3.x系统就是使用协同式来实现多进程多任务的，相当不稳定，一个进程坚持不让出CPU执行时间就可能会导致整个系统崩溃。</p>
<p>如果使用抢占式调度的多线程系统，那么每个线程将由系统来分配执行时间，线程的切换不由线程本身来决定（在Java中，Thread.yield()可以让出执行时间，但是要获取执行时间的话，线程本身是没有什么办法的）。抢占式线程调度：</p>
<p>好处：</p>
<p>1）线程的执行时间是系统可控的</p>
<p>2）也不会有一个线程导致整个进程阻塞的问题。Java使用的线程调度方式就是抢占式调度。与前面所说的Windows 3.x的例子相对，在Windows 9x/NT内核中就是使用抢占式来实现多进程的，当一个进程出了问题，我们还可以使用任务管理器把这个进程“杀掉”，而不至于导致系统崩溃。</p>
<p>Java语言一共设置了10个级别的线程优先级（Thread.MIN_PRIORITY至Thread.MAX_PRIORITY），在两个线程同时处于Ready状态时，优先级越高的线程越容易被系统选择执行。</p>
<p>不过，线程优先级并不是太靠谱，原因是Java的线程是通过映射到系统的原生线程上来实现的，所以线程调度最终还是取决于操作系统，虽然现在很多操作系统都提供线程优先级的概念，但是并不见得能与Java线程的优先级一一对应。</p>
<p>Solaris中有232种优先级，Windows中只有7种。Windows平台JDK中使用了除THREAD_PRIORITY_IDLE之外的其余6种线程优先级。</p>
<p>Java线程优先级与Windows线程优先级之间的对应关系：<br>Java线程优先级     Windows线程优先级</p>
<table>
<thead>
<tr>
<th>1</th>
<th>（Thread.MIN_PRIORITY）</th>
<th>THREAD_PRIORITY_LOWEST  </th>
</tr>
</thead>
<tbody>
<tr>
<td>2</td>
<td></td>
<td>THREAD_PRIORITY_LOWEST  </td>
</tr>
<tr>
<td>3</td>
<td></td>
<td>THREAD_PRIORITY_BELOW_NORMAL  </td>
</tr>
<tr>
<td>4</td>
<td></td>
<td>THREAD_PRIORITY_BELOW_NORMAL</td>
</tr>
<tr>
<td>5</td>
<td>（Thread.NORM_PRIORITY）</td>
<td>THREAD_PRIORITY_NORMAL</td>
</tr>
<tr>
<td>6</td>
<td></td>
<td>THREAD_PRIORITY_ABOVE_NORMAL</td>
</tr>
<tr>
<td>7</td>
<td></td>
<td>THREAD_PRIORITY_ABOVE_NORMAL</td>
</tr>
<tr>
<td>8</td>
<td></td>
<td>THREAD_PRIORITY_HIGHEST</td>
</tr>
<tr>
<td>9</td>
<td></td>
<td>THREAD_PRIORITY_HIGHEST</td>
</tr>
<tr>
<td>10</td>
<td>（Thread.MAX_PRIORITY）</td>
<td>THREAD_PRIORTIY_CRITICAL</td>
</tr>
</tbody>
</table>
<p>上文说到“线程优先级并不是太靠谱”，不仅仅是说在一些平台上不同的优先级实际会变得相同这一点，还有其它情况让我们不能太依赖优先级：优先级可能会被系统自行改变。例如，在Windows系统中存在一个称为“优先级推进器”（Priority Boosting，它当然可以被关闭掉）的功能，它的大致作用就是当系统发现一个线程执行的特别“勤奋努力”的话，可能会越过线程优先级去为它分配执行时间。因此，我们不能在程序中通过优先级来完全准确地判断一组状态都为Ready的线程将会先执行哪一个。</p>
<p>状态转换</p>
<p>线程状态转换关系：</p>
<p><img src="/images/pasted-14.png" alt="upload successful"><br>Java语言定义了5种线程状态，在任意一个时间点，一个线程只能有且只有其中的一种状态，这5种状态分别如下：</p>
<p>1）新建（New）：创建后尚未启动的线程处于这种状态。</p>
<p>2）运行（Runable）：Runable包括了操作系统线程状态中的Running和Ready，也就是处于此状态的线程有可能正在执行，也有可能正在等待着CPU为它分配执行时间。</p>
<p>3）无限期等待（Waiting）：处于这种状态的线程不会被分配CPU执行时间，它们要等待被其它线程显示地唤醒。以下方法会让线程陷入无限期的等待状态：</p>
<p>没有设置Timeout参数的Object.wait()方法</p>
<p>没有设置Timeout参数的Thread.join()方法</p>
<p>LockSupport.park()方法</p>
<p>4）限期等待（Timed Waiting）：处于这种状态的线程也不会被分配CPU执行时间，不过无须等待被其它线程显示地唤醒，在一定时间之后它们会由系统自动唤醒。以下方法会让线程进入限期等待状态：</p>
<p>Thread.sleep()方法</p>
<p>设置了Timeout参数的Object.wait()方法</p>
<p>设置了Timeout参数的Thread.join()方法</p>
<p>LockSupport.parkNanos()方法</p>
<p>LockSupport.parkUntil()方法</p>
<p>5）阻塞（Blocked）：线程被阻塞了，“阻塞状态”与“等待状态”的区别是：“阻塞状态”在等待着获取到一个排它锁，这个事件将在另外一个线程放弃这个锁的时候发生；而“等待状态”则是在等待一段时间，或者唤醒动作的发生。在程序等待进入同步区域的时候，线程将进入这种状态。</p>
<p>6）结束（Terminated）：已终止线程的线程状态，线程已经结束执行。</p>
<p>参考文章：<a href="http://www.linuxidc.com/Linux/2016-09/135308.htm?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="noopener">http://www.linuxidc.com/Linux/2016-09/135308.htm?utm_source=tuicool&amp;utm_medium=referral</a></p>
]]></content>
      
        
        <tags>
            
            <tag> java线程 </tag>
            
            <tag> 线程实现模型 </tag>
            
            <tag> 内核线程 </tag>
            
            <tag> 用户线程 </tag>
            
            <tag> 轻量级进程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java bit shift移位运算显真容]]></title>
      <url>/2018/01/15/java%20bit-shift%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E6%98%BE%E7%9C%9F%E5%AE%B9/</url>
      <content type="html"><![CDATA[<h5 id="引文"><a href="#引文" class="headerlink" title="引文"></a>引文</h5><p>在学习java三个基础的移位操作符时，往往聚焦的移位操作符本身是左移”&lt;&lt;”，带符号右移”&gt;&gt;”还是无符号右移”&gt;&gt;&gt;”，而忽略了左右操作数对结果的影响，以下输出打印的结果是什么呢？</p>
<p>System.out.println(0xff &gt;&gt;&gt; 7);</p>
<p>System.out.println((((byte) 0xff) &gt;&gt;&gt; 7));  </p>
<p>System.out.println((byte) (((byte) 0xff) &gt;&gt;&gt; 7));  </p>
<h5 id="java的三种操作符"><a href="#java的三种操作符" class="headerlink" title="java的三种操作符"></a>java的三种操作符</h5><p><code>&gt;&gt;</code> 是带符号右移，若左操作数是正数，则高位补“0”，若左操作数是负数，则高位补“1”.</p>
<p><code>&lt;&lt;</code> 将左操作数向左边移动，并且在低位补0.</p>
<p><code>&gt;&gt;&gt;</code> 是无符号右移，无论左操作数是正数还是负数，在高位都补“0”.</p>
<h5 id="左右操作数的影响"><a href="#左右操作数的影响" class="headerlink" title="左右操作数的影响"></a>左右操作数的影响</h5><p>三种移位符号作用的左操作数有五种：long,int,short,byte,char,但是在作用不同的操作数类型时，其具体过程不同, 遵循一下几个原则：</p>
<p>1、int移位时，左边的操作数是32位的，此时的移位符号作用在32位bit上。如：1 &gt;&gt; 3, 是将00000000 00000000 00000000 00000001这32位向右边移动3位。</p>
<p>2、long 移位时，左边的操作数是64位的，此时移位符号作用在64位bit上。如：1L &gt;&gt; 3。</p>
<p>3、short, byte,char 在移位之前首先将数据转换为int，这里需要了解java类型转换的一些规则，注意小-&gt;大<br>的带符号的拓展，然后再移位，此时移位符号作用在32为bit上。如：(byte)0xff &gt;&gt;&gt; 7, 是将11111111 11111111 11111111 11111111向右边移动7位，得到00000001 11111111 11111111 11111111。</p>
<p>4、有1,2可知，当左操作数是long时，移位之后得到的类型是long，当左操作数是其它类型时，移位之后得到的类型是int，所以如果左操作数是byte,char,short 时，你用　&gt;&gt;,&gt;&gt;&gt;, &lt;&lt; 其实是将得到的int 做低位截取得到的数值。</p>
<p>5、三种移位符号除了对做操作数有操作规则外，其实对右操作数也有操作规则。如果左操作数（转换之后的）是int,那么右操作数只有低５位有效，为什么?因为int 总共就32位，如：23 &gt;&gt; 33, 结果与23 &gt;&gt;1是一样的，都是11；同理，如果左边操作数是long，那么右边操作数只有低6位有效。</p>
<h5 id="java字面量"><a href="#java字面量" class="headerlink" title="java字面量"></a>java字面量</h5><p>注意java声明字面量的类型，例如0xff 本身就是一个int而不是byte</p>
<h5 id="引文中的输出结果"><a href="#引文中的输出结果" class="headerlink" title="引文中的输出结果"></a>引文中的输出结果</h5><p>System.out.println(0xff &gt;&gt;&gt; 7);</p>
<p>其bits为：</p>
<p>00000000 00000000 00000000 11111111，无符号向右移动7位， 得到的bits当然为：00000000 00000000 00000000 00000001，</p>
<p>System.out.println((((byte) 0xff) &gt;&gt;&gt; 7));</p>
<p>(byte)0xff 是一个byte，bits为： 11111111， 首先转换为int，其bits为：11111111 11111111 11111111 11111111， 向右边无符号移动7为，得到的结果bits是：00000001 11111111 11111111 11111111。</p>
<p>System.out.println((byte) (((byte) 0xff) &gt;&gt;&gt; 7));</p>
<p>(byte) 0xff 是一个byte，bits为： 11111111， 首先转换为int，其bits为：11111111 11111111 11111111 11111111，向右边无符号移动7为，得到的结果bits是：00000001 11111111 11111111 11111111，然后转换为byte，低位截取得到bits: 11111111, 在输出的时候转换为int， 其bits为：11111111 11111111 11111111 11111111.</p>
<p>所以上面三个的结果是：</p>
<p>1</p>
<p>33554431</p>
<p>-1  </p>
<p>参考文章：<br><a href="https://www.jianshu.com/p/0236b51b903f" target="_blank" rel="noopener">https://www.jianshu.com/p/0236b51b903f</a></p>
]]></content>
      
        <categories>
            
            <category> javaSE </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java移位 </tag>
            
            <tag> 移位操作符 </tag>
            
            <tag> 移位操作数 </tag>
            
            <tag> bit shift </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网站业务并发用户峰值计算公式C‘≈C+3√C的推导]]></title>
      <url>/2018/01/11/%E7%BD%91%E7%AB%99%E4%B8%9A%E5%8A%A1%E5%B9%B6%E5%8F%91%E7%94%A8%E6%88%B7%E5%B3%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E5%85%AC%E5%BC%8FC%E2%80%98%E2%89%88C-3-%E2%88%9A3%E7%9A%84%E6%8E%A8%E5%AF%BC/</url>
      <content type="html"><![CDATA[<h4 id="引文"><a href="#引文" class="headerlink" title="引文"></a>引文</h4><p>在学习系统吞吐量、TPS（QPS）、用户并发量、性能測试概念和公式的时候，多次看到这样一个公式<br><code>C&#39;≈C+3√C</code>,其中<code>C=nL / T</code><br>当中C是平均的并发用户数，n是平均每天訪问用户数（login session），L是一天内用户从登录到退出的平均时间（login session的平均时间），T是考察时间长度（一天内多长时间实用户使用系统），C’表示业务并发用户数的峰值。但是这个公式是如何得出的呢？<br><a href="https://www.cnblogs.com/cynchanpin/p/7365859.html" target="_blank" rel="noopener">https://www.cnblogs.com/cynchanpin/p/7365859.html</a></p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><h5 id="数学基础"><a href="#数学基础" class="headerlink" title="数学基础"></a>数学基础</h5><h6 id="泊松分布"><a href="#泊松分布" class="headerlink" title="泊松分布"></a>泊松分布</h6><p>该公式的导出依赖概率论的一个重要的离散概率分布——泊松分布，关于泊松分布的概率函数和分布性质可参考百度百科<br><a href="https://baike.baidu.com/item/%E6%B3%8A%E6%9D%BE%E5%88%86%E5%B8%83/1442110?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/%E6%B3%8A%E6%9D%BE%E5%88%86%E5%B8%83/1442110?fr=aladdin</a></p>
<h6 id="置信水平"><a href="#置信水平" class="headerlink" title="置信水平"></a>置信水平</h6><p>置信水平是指特定个体对待特定命题真实性相信的程度，也就是概率是对个人信念合理性的量度。概率的置信度解释表明，事件本身并没有什么概率，事件之所以指派有概率只是指派概率的人头脑中所具有的信念证据。置信水平是指总体参数值落在样本统计值某一区内的概率；而置信区间是指在某一置信水平下，样本统计值与总体参数值间误差范围。置信区间越大，置信水平越高。<br><a href="https://baike.baidu.com/item/%E7%BD%AE%E4%BF%A1%E6%B0%B4%E5%B9%B3/7442548?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/%E7%BD%AE%E4%BF%A1%E6%B0%B4%E5%B9%B3/7442548?fr=aladdin</a></p>
<h6 id="置信区间"><a href="#置信区间" class="headerlink" title="置信区间"></a>置信区间</h6><p>置信区间是指由样本统计量所构造的总体参数的估计区间。在统计学中，一个概率样本的置信区间（Confidence interval）是对这个样本的某个总体参数的区间估计。置信区间展现的是这个参数的真实值有一定概率落在测量结果的周围的程度。置信区间给出的是被测量参数的测量值的可信程度，即前面所要求的“一个概率”。<br><a href="https://baike.baidu.com/item/%E7%BD%AE%E4%BF%A1%E5%8C%BA%E9%97%B4/7442583?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/%E7%BD%AE%E4%BF%A1%E5%8C%BA%E9%97%B4/7442583?fr=aladdin</a></p>
<h6 id="泊松分布的参数区间估计"><a href="#泊松分布的参数区间估计" class="headerlink" title="泊松分布的参数区间估计"></a>泊松分布的参数区间估计</h6><p><img src="/images/pasted-4.png" alt="upload successful"></p>
<p><img src="/images/pasted-6.png" alt="upload successful"></p>
<p><img src="/images/pasted-7.png" alt="upload successful"></p>
<p><img src="/images/pasted-8.png" alt="upload successful"></p>
<p><a href="https://wenku.baidu.com/view/09504bc089eb172ded63b787.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/09504bc089eb172ded63b787.html</a></p>
<h5 id="推导"><a href="#推导" class="headerlink" title="推导"></a>推导</h5><h6 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h6><p>假设用户的login session产生符合泊松分布</p>
<h6 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h6><p><img src="/images/pasted-9.png" alt="upload successful"></p>
<p><img src="/images/pasted-10.png" alt="upload successful"><br>从泊松分布的分布图来看，x轴表示参数k的值，该值在我们这里即表示网站某一时刻的用户并发量，y轴表示发生的概率，参数λ是单位时间(或单位面积)内随机事件的平均发生率。<br>求并发用户峰值的问题可以转化为x轴参数k可以取的最大值，即在某一置信区间下该分布的参数区间估计的右侧最大值,即求：泊松分布的参数区间估计右闭区间<code>X+uα/2*√X</code>的值。<br>当显著性水平α=0，即取100%置信水平时，查标准正态分布表可知，uα/2最大取3，即<br><code>X+3√X</code><br>其中X就是网站平均并发用户量C，所以有峰值<br><code>C&#39;=C+3√C</code></p>
<h5 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h5><p>该公式是由泊松分布的参数估计区间取最大值的情况下得到的。<br>但是这个结果是在非常理想的情况下产生的，并不是计算并发用户峰值的万能公式。<br>可参考<a href="http://dy.163.com/v2/article/detail/CEBT1NFA05169NIJ.html" target="_blank" rel="noopener">http://dy.163.com/v2/article/detail/CEBT1NFA05169NIJ.html</a>  </p>
<p>此外泊松分布在计算机领域有很多类似的应用，例如设计游戏地图的资源随机生成等。</p>
]]></content>
      
        <categories>
            
            <category> 运维&amp;测试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数学与算法 </tag>
            
            <tag> 泊松分布 </tag>
            
            <tag> 并发 </tag>
            
            <tag> 并发峰值 </tag>
            
            <tag> 并发公式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2018/01/09/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>

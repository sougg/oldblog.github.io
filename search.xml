<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[java bit shift移位运算显真容]]></title>
      <url>/2018/01/15/java%20bit-shift%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E6%98%BE%E7%9C%9F%E5%AE%B9/</url>
      <content type="html"><![CDATA[<h5 id="引文"><a href="#引文" class="headerlink" title="引文"></a>引文</h5><p>在学习java三个基础的移位操作符时，往往聚焦的移位操作符本身是左移”&lt;&lt;”，带符号右移”&gt;&gt;”还是无符号右移”&gt;&gt;&gt;”，而忽略了左右操作数对结果的影响，以下输出打印的结果是什么呢？</p>
<p>System.out.println(0xff &gt;&gt;&gt; 7);</p>
<p>System.out.println((((byte) 0xff) &gt;&gt;&gt; 7));  </p>
<p>System.out.println((byte) (((byte) 0xff) &gt;&gt;&gt; 7));  </p>
<h5 id="java的三种操作符"><a href="#java的三种操作符" class="headerlink" title="java的三种操作符"></a>java的三种操作符</h5><p><code>&gt;&gt;</code> 是带符号右移，若左操作数是正数，则高位补“0”，若左操作数是负数，则高位补“1”.</p>
<p><code>&lt;&lt;</code> 将左操作数向左边移动，并且在低位补0.</p>
<p><code>&gt;&gt;&gt;</code> 是无符号右移，无论左操作数是正数还是负数，在高位都补“0”.</p>
<h5 id="左右操作数的影响"><a href="#左右操作数的影响" class="headerlink" title="左右操作数的影响"></a>左右操作数的影响</h5><p>三种移位符号作用的左操作数有五种：long,int,short,byte,char,但是在作用不同的操作数类型时，其具体过程不同, 遵循一下几个原则：</p>
<p>1、int移位时，左边的操作数是32位的，此时的移位符号作用在32位bit上。如：1 &gt;&gt; 3, 是将00000000 00000000 00000000 00000001这32位向右边移动3位。</p>
<p>2、long 移位时，左边的操作数是64位的，此时移位符号作用在64位bit上。如：1L &gt;&gt; 3。</p>
<p>3、short, byte,char 在移位之前首先将数据转换为int，这里需要了解java类型转换的一些规则，注意小-&gt;大<br>的带符号的拓展，然后再移位，此时移位符号作用在32为bit上。如：(byte)0xff &gt;&gt;&gt; 7, 是将11111111 11111111 11111111 11111111向右边移动7位，得到00000001 11111111 11111111 11111111。</p>
<p>4、有1,2可知，当左操作数是long时，移位之后得到的类型是long，当左操作数是其它类型时，移位之后得到的类型是int，所以如果左操作数是byte,char,short 时，你用　&gt;&gt;,&gt;&gt;&gt;, &lt;&lt; 其实是将得到的int 做低位截取得到的数值。</p>
<p>5、三种移位符号除了对做操作数有操作规则外，其实对右操作数也有操作规则。如果左操作数（转换之后的）是int,那么右操作数只有低５位有效，为什么?因为int 总共就32位，如：23 &gt;&gt; 33, 结果与23 &gt;&gt;1是一样的，都是11；同理，如果左边操作数是long，那么右边操作数只有低6位有效。</p>
<h5 id="java字面量"><a href="#java字面量" class="headerlink" title="java字面量"></a>java字面量</h5><p>注意java声明字面量的类型，例如0xff 本身就是一个int而不是byte</p>
<h5 id="引文中的输出结果"><a href="#引文中的输出结果" class="headerlink" title="引文中的输出结果"></a>引文中的输出结果</h5><p>System.out.println(0xff &gt;&gt;&gt; 7);</p>
<p>其bits为：</p>
<p>00000000 00000000 00000000 11111111，无符号向右移动7位， 得到的bits当然为：00000000 00000000 00000000 00000001，</p>
<p>System.out.println((((byte) 0xff) &gt;&gt;&gt; 7));</p>
<p>(byte)0xff 是一个byte，bits为： 11111111， 首先转换为int，其bits为：11111111 11111111 11111111 11111111， 向右边无符号移动7为，得到的结果bits是：00000001 11111111 11111111 11111111。</p>
<p>System.out.println((byte) (((byte) 0xff) &gt;&gt;&gt; 7));</p>
<p>(byte) 0xff 是一个byte，bits为： 11111111， 首先转换为int，其bits为：11111111 11111111 11111111 11111111，向右边无符号移动7为，得到的结果bits是：00000001 11111111 11111111 11111111，然后转换为byte，低位截取得到bits: 11111111, 在输出的时候转换为int， 其bits为：11111111 11111111 11111111 11111111.</p>
<p>所以上面三个的结果是：</p>
<p>1</p>
<p>33554431</p>
<p>-1  </p>
<p>参考文章：<br><a href="https://www.jianshu.com/p/0236b51b903f" target="_blank" rel="noopener">https://www.jianshu.com/p/0236b51b903f</a></p>
]]></content>
      
        <categories>
            
            <category> javaSE </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java移位 </tag>
            
            <tag> 移位操作符 </tag>
            
            <tag> 移位操作数 </tag>
            
            <tag> bit shift </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网站业务并发用户峰值计算公式C‘≈C+3√C的推导]]></title>
      <url>/2018/01/11/%E7%BD%91%E7%AB%99%E4%B8%9A%E5%8A%A1%E5%B9%B6%E5%8F%91%E7%94%A8%E6%88%B7%E5%B3%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E5%85%AC%E5%BC%8FC%E2%80%98%E2%89%88C-3-%E2%88%9A3%E7%9A%84%E6%8E%A8%E5%AF%BC/</url>
      <content type="html"><![CDATA[<h4 id="引文"><a href="#引文" class="headerlink" title="引文"></a>引文</h4><p>在学习系统吞吐量、TPS（QPS）、用户并发量、性能測试概念和公式的时候，多次看到这样一个公式<br><code>C&#39;≈C+3√C</code>,其中<code>C=nL / T</code><br>当中C是平均的并发用户数，n是平均每天訪问用户数（login session），L是一天内用户从登录到退出的平均时间（login session的平均时间），T是考察时间长度（一天内多长时间实用户使用系统），C’表示业务并发用户数的峰值。但是这个公式是如何得出的呢？<br><a href="https://www.cnblogs.com/cynchanpin/p/7365859.html" target="_blank" rel="noopener">https://www.cnblogs.com/cynchanpin/p/7365859.html</a></p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><h5 id="数学基础"><a href="#数学基础" class="headerlink" title="数学基础"></a>数学基础</h5><h6 id="泊松分布"><a href="#泊松分布" class="headerlink" title="泊松分布"></a>泊松分布</h6><p>该公式的导出依赖概率论的一个重要的离散概率分布——泊松分布，关于泊松分布的概率函数和分布性质可参考百度百科<br><a href="https://baike.baidu.com/item/%E6%B3%8A%E6%9D%BE%E5%88%86%E5%B8%83/1442110?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/%E6%B3%8A%E6%9D%BE%E5%88%86%E5%B8%83/1442110?fr=aladdin</a></p>
<h6 id="置信水平"><a href="#置信水平" class="headerlink" title="置信水平"></a>置信水平</h6><p>置信水平是指特定个体对待特定命题真实性相信的程度，也就是概率是对个人信念合理性的量度。概率的置信度解释表明，事件本身并没有什么概率，事件之所以指派有概率只是指派概率的人头脑中所具有的信念证据。置信水平是指总体参数值落在样本统计值某一区内的概率；而置信区间是指在某一置信水平下，样本统计值与总体参数值间误差范围。置信区间越大，置信水平越高。<br><a href="https://baike.baidu.com/item/%E7%BD%AE%E4%BF%A1%E6%B0%B4%E5%B9%B3/7442548?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/%E7%BD%AE%E4%BF%A1%E6%B0%B4%E5%B9%B3/7442548?fr=aladdin</a></p>
<h6 id="置信区间"><a href="#置信区间" class="headerlink" title="置信区间"></a>置信区间</h6><p>置信区间是指由样本统计量所构造的总体参数的估计区间。在统计学中，一个概率样本的置信区间（Confidence interval）是对这个样本的某个总体参数的区间估计。置信区间展现的是这个参数的真实值有一定概率落在测量结果的周围的程度。置信区间给出的是被测量参数的测量值的可信程度，即前面所要求的“一个概率”。<br><a href="https://baike.baidu.com/item/%E7%BD%AE%E4%BF%A1%E5%8C%BA%E9%97%B4/7442583?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/%E7%BD%AE%E4%BF%A1%E5%8C%BA%E9%97%B4/7442583?fr=aladdin</a></p>
<h6 id="泊松分布的参数区间估计"><a href="#泊松分布的参数区间估计" class="headerlink" title="泊松分布的参数区间估计"></a>泊松分布的参数区间估计</h6><p><img src="/images/pasted-4.png" alt="upload successful"></p>
<p><img src="/images/pasted-6.png" alt="upload successful"></p>
<p><img src="/images/pasted-7.png" alt="upload successful"></p>
<p><img src="/images/pasted-8.png" alt="upload successful"></p>
<p><a href="https://wenku.baidu.com/view/09504bc089eb172ded63b787.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/09504bc089eb172ded63b787.html</a></p>
<h5 id="推导"><a href="#推导" class="headerlink" title="推导"></a>推导</h5><h6 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h6><p>假设用户的login session产生符合泊松分布</p>
<h6 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h6><p><img src="/images/pasted-9.png" alt="upload successful"></p>
<p><img src="/images/pasted-10.png" alt="upload successful"><br>从泊松分布的分布图来看，x轴表示参数k的值，该值在我们这里即表示网站某一时刻的用户并发量，y轴表示发生的概率，参数λ是单位时间(或单位面积)内随机事件的平均发生率。<br>求并发用户峰值的问题可以转化为x轴参数k可以取的最大值，即在某一置信区间下该分布的参数区间估计的右侧最大值,即求：泊松分布的参数区间估计右闭区间<code>X+uα/2*√X</code>的值。<br>当显著性水平α=0，即取100%置信水平时，查标准正态分布表可知，uα/2最大取3，即<br><code>X+3√X</code><br>其中X就是网站平均并发用户量C，所以有峰值<br><code>C&#39;=C+3√C</code></p>
<h5 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h5><p>该公式是由泊松分布的参数估计区间取最大值的情况下得到的。<br>但是这个结果是在非常理想的情况下产生的，并不是计算并发用户峰值的万能公式。<br>可参考<a href="http://dy.163.com/v2/article/detail/CEBT1NFA05169NIJ.html" target="_blank" rel="noopener">http://dy.163.com/v2/article/detail/CEBT1NFA05169NIJ.html</a>  </p>
<p>此外泊松分布在计算机领域有很多类似的应用，例如设计游戏地图的资源随机生成等。</p>
]]></content>
      
        <categories>
            
            <category> 运维&amp;测试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数学与算法 </tag>
            
            <tag> 泊松分布 </tag>
            
            <tag> 并发 </tag>
            
            <tag> 并发峰值 </tag>
            
            <tag> 并发公式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2018/01/09/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
